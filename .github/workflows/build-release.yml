name: Build release artifacts
on:
  workflow_dispatch:
    inputs:
      upload-artifacts:
        type: string
        default: 'NO'
      artifacts-retention-days:
        type: number
        default: 1
      publish:
        type: string
        default: 'NO'
      target:
        type: string
        description: 'The target package to build'
        default: '*'
  workflow_call:
    inputs:
      upload-artifacts:
        type: string
        default: 'YES'
      artifacts-retention-days:
        type: number
        default: 3
      publish:
        type: string
        default: 'NO'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          # Linux x86_64 default
          - os: ubuntu-22.04
            arch: x86_64
            container: ''
            target: default
            package: node-llama-linux-x64
          # Linux x86_64 CUDA
          - os: ubuntu-22.04
            arch: x86_64
            container: nvidia/cuda:12.6.2-devel-ubuntu22.04
            target: cuda
            package: node-llama-linux-x64-cuda
            need-fix-git: 'true'
          # Linux x86_64 Vulkan
          - os: ubuntu-22.04
            arch: x86_64
            target: vulkan
            package: node-llama-linux-x64-vulkan
          # Linux arm64 default
          - os: ubuntu-22.04-arm
            arch: arm64
            target: default
            package: node-llama-linux-arm64
          # Linux arm64 CUDA
          - os: ubuntu-22.04-arm
            arch: arm64
            container: nvidia/cuda:12.6.2-devel-ubuntu22.04
            target: cuda
            package: node-llama-linux-arm64-cuda
            need-fix-git: 'true'
          # Linux arm64 Vulkan
          - os: ubuntu-22.04-arm
            arch: arm64
            target: vulkan
            package: node-llama-linux-arm64-vulkan
          # macOS x64
          - os: macos-13
            arch: x64
            target: default
            package: node-llama-darwin-x64
          # macOS arm64
          - os: macos-14
            arch: arm64
            target: default
            package: node-llama-darwin-arm64
          # Windows x64 default
          - os: windows-latest
            arch: x64
            target: default
            package: node-llama-win32-x64
          # Windows x64 CUDA
          - os: windows-latest
            arch: x64
            target: cuda
            package: node-llama-win32-x64-cuda
          # Windows x64 Vulkan
          - os: windows-latest
            arch: x64
            target: vulkan
            package: node-llama-win32-x64-vulkan
          # Windows arm64 default
          - os: windows-11-arm
            arch: arm64
            target: default
            package: node-llama-win32-arm64
          # Windows arm64 Vulkan
          - os: windows-11-arm
            arch: arm64
            target: vulkan
            package: node-llama-win32-arm64-vulkan
    steps:
      - name: Run this job?
        id: run
        env:
          TRIGGER_TARGET: ${{ github.event.inputs.target || '*' }}
          TARGET: ${{ matrix.package }}
        shell: bash
        run: |
          if [[ "$TARGET" == $TRIGGER_TARGET ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi
      - name: Upgrade git
        if: steps.run.outputs.should-run == 'true' && matrix.need-fix-git == 'true'
        run: apt-get update && apt-get install -y git
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: node_modules cache
        if: steps.run.outputs.should-run == 'true'
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - name: externals cache
        if: steps.run.outputs.should-run == 'true'
        uses: actions/cache@v4
        with:
          path: externals
          key: ${{ runner.os }}-${{ runner.arch }}-externals-${{ hashFiles('scripts/prepare-*.sh') }}
      - uses: actions/setup-node@v4
        if: steps.run.outputs.should-run == 'true'
        with:
          node-version: 20
          cache: "npm"
      - name: Install dependencies
        if: steps.run.outputs.should-run == 'true'
        run: npm ci --ignore-scripts
      - name: Install Vulkan SDK
        if: matrix.target == 'vulkan'
        uses: jakoch/install-vulkan-sdk-action@v1
        with:
          vulkan_version: '1.4.313.0'
          install_runtime: false
          cache: true
          stripdown: true
      - name: Prepare & build (Linux)
        if: steps.run.outputs.should-run == 'true' && runner.os == 'Linux'
        run: |
          bash ./scripts/prepare-linux.sh -a ${{ matrix.arch }} -t ${{ matrix.target }}
          bash ./scripts/build-linux.sh -a ${{ matrix.arch }} -t ${{ matrix.target }}
      - name: Prepare & build (macOS)
        if: steps.run.outputs.should-run == 'true' && runner.os == 'macOS'
        run: |
          bash ./scripts/build-macos.sh
      - name: Prepare & build (Windows)
        if: steps.run.outputs.should-run == 'true' && runner.os == 'Windows'
        run: |
          pwsh ./scripts/prepare-windows.ps1 -arch ${{ matrix.arch }} -target ${{ matrix.target }}
          pwsh ./scripts/build-windows.ps1 -arch ${{ matrix.arch }} -target ${{ matrix.target }}
      - name: Upload build artifacts
        if: steps.run.outputs.should-run == 'true' && (github.event.inputs.upload-artifacts == 'YES' || inputs.upload-artifacts == 'YES')
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.package }}
          path: packages/${{ matrix.package }}
          retention-days: ${{ inputs.artifacts-retention-days }}
      - name: Publish to NPM
        if: steps.run.outputs.should-run == 'true' && (github.event.inputs.publish == 'YES' || inputs.publish == 'YES')
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: packages/${{ matrix.package }}

diff --git a/src/llama.cpp/common/chat.cpp b/src/llama.cpp/common/chat.cpp
index 23d3828f9..ca48af00c 100644
--- a/src/llama.cpp/common/chat.cpp
+++ b/src/llama.cpp/common/chat.cpp
@@ -6,9 +6,6 @@
 #include "log.h"
 #include "regex-partial.h"
 
-#include <minja/chat-template.hpp>
-#include <minja/minja.hpp>
-
 #include <cstdio>
 #include <exception>
 #include <iostream>
@@ -123,16 +120,6 @@ std::vector<common_chat_msg_diff> common_chat_msg_diff::compute_diffs(const comm
     return diffs;
 }
 
-typedef minja::chat_template common_chat_template;
-
-struct common_chat_templates {
-    bool add_bos;
-    bool add_eos;
-    bool has_explicit_template; // Model had builtin template or template overridde was specified.
-    std::unique_ptr<common_chat_template> template_default; // always set (defaults to chatml)
-    std::unique_ptr<common_chat_template> template_tool_use;
-};
-
 struct templates_params {
     json messages;
     json tools;
diff --git a/src/llama.cpp/common/chat.h b/src/llama.cpp/common/chat.h
index d1e480c91..437e64e29 100644
--- a/src/llama.cpp/common/chat.h
+++ b/src/llama.cpp/common/chat.h
@@ -9,7 +9,18 @@
 #include <vector>
 #include <map>
 
-struct common_chat_templates;
+#include "minja/chat-template.hpp"
+#include "minja/minja.hpp"
+
+typedef minja::chat_template common_chat_template;
+
+struct common_chat_templates {
+    bool add_bos;
+    bool add_eos;
+    bool has_explicit_template; // Model had builtin template or template overridde was specified.
+    std::unique_ptr<common_chat_template> template_default; // always set (defaults to chatml)
+    std::unique_ptr<common_chat_template> template_tool_use;
+};
 
 struct common_chat_tool_call {
     std::string name;
diff --git a/src/llama.cpp/common/common.cpp b/src/llama.cpp/common/common.cpp
index 67dd5404f..909a97c66 100644
--- a/src/llama.cpp/common/common.cpp
+++ b/src/llama.cpp/common/common.cpp
@@ -1117,6 +1117,7 @@ struct llama_model_params common_model_params_to_llama(common_params & params) {
         mparams.n_gpu_layers = params.n_gpu_layers;
     }
 
+    mparams.vocab_only      = params.vocab_only;
     mparams.main_gpu        = params.main_gpu;
     mparams.split_mode      = params.split_mode;
     mparams.tensor_split    = params.tensor_split;
diff --git a/src/llama.cpp/common/common.h b/src/llama.cpp/common/common.h
index 75596e6b3..0e04694c8 100644
--- a/src/llama.cpp/common/common.h
+++ b/src/llama.cpp/common/common.h
@@ -267,6 +267,7 @@ struct lr_opt {
 struct ggml_opt_optimizer_params common_opt_lr_pars(void * userdata);
 
 struct common_params {
+    bool vocab_only               = false;
     int32_t n_predict             =    -1; // new tokens to predict
     int32_t n_ctx                 =  4096; // context size
     int32_t n_batch               =  2048; // logical batch size for prompt processing (must be >=32 to use BLAS)
diff --git a/src/llama.cpp/ggml/src/ggml-cpu/CMakeLists.txt b/src/llama.cpp/ggml/src/ggml-cpu/CMakeLists.txt
index ce0a3e128..df9300224 100644
--- a/src/llama.cpp/ggml/src/ggml-cpu/CMakeLists.txt
+++ b/src/llama.cpp/ggml/src/ggml-cpu/CMakeLists.txt
@@ -106,7 +106,7 @@ function(ggml_add_cpu_backend_variant_impl tag_name)
             )
 
         if (MSVC AND NOT CMAKE_C_COMPILER_ID STREQUAL "Clang")
-            message(FATAL_ERROR "MSVC is not supported for ARM, use clang")
+            list(APPEND ARCH_FLAGS /arch:armv8.7)
         else()
             check_cxx_compiler_flag(-mfp16-format=ieee GGML_COMPILER_SUPPORTS_FP16_FORMAT_I3E)
             if (NOT "${GGML_COMPILER_SUPPORTS_FP16_FORMAT_I3E}" STREQUAL "")
diff --git a/src/llama.cpp/ggml/src/ggml-vulkan/CMakeLists.txt b/src/llama.cpp/ggml/src/ggml-vulkan/CMakeLists.txt
index b97e7bf99..c3eb9519f 100644
--- a/src/llama.cpp/ggml/src/ggml-vulkan/CMakeLists.txt
+++ b/src/llama.cpp/ggml/src/ggml-vulkan/CMakeLists.txt
@@ -111,7 +111,7 @@ if (Vulkan_FOUND)
     endif()
 
     # Set up toolchain for host compilation whether cross-compiling or not
-    if (CMAKE_CROSSCOMPILING)
+    if (CMAKE_CROSSCOMPILING OR NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL CMAKE_SYSTEM_PROCESSOR)
         if (GGML_VULKAN_SHADERS_GEN_TOOLCHAIN)
             set(HOST_CMAKE_TOOLCHAIN_FILE ${GGML_VULKAN_SHADERS_GEN_TOOLCHAIN})
         else()
@@ -131,7 +131,7 @@ if (Vulkan_FOUND)
 
     include(ExternalProject)
 
-    if (CMAKE_CROSSCOMPILING)
+    if (CMAKE_CROSSCOMPILING OR NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL CMAKE_SYSTEM_PROCESSOR)
         list(APPEND VULKAN_SHADER_GEN_CMAKE_ARGS -DCMAKE_TOOLCHAIN_FILE=${HOST_CMAKE_TOOLCHAIN_FILE})
         message(STATUS "vulkan-shaders-gen toolchain file: ${HOST_CMAKE_TOOLCHAIN_FILE}")
     endif()
